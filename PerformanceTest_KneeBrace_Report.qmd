---
title: "PFL DATA REPORT"
format: 
  docx:
    reference-doc: 'C:/Users/bethany.kilpatrick/Boa Technology Inc/PFL - General/Testing Segments/Report_Template.docx'
editor: visual
editor_options: 
  chunk_output_type: console
---

# CONFIDENTAL CONTENT FOR BOA EMPLOYEES ONLY. PLEASE CONTACT PFL DIRECTLY WITH ANY QUESTIONS.

+--------------------+--------------------------------------------------+
| Test Name          | EH_Medical_KneeBracePilotII_Aug23                |
+====================+==================================================+
| **Benefit:**       | Endurance & Health                               |
+--------------------+--------------------------------------------------+
| **Date:**          | 10/2023                                          |
+--------------------+--------------------------------------------------+
| **Test Type:**     | Mechanistic                                      |
+--------------------+--------------------------------------------------+
| **Configurations** | Baseline: Preferred Tightness - Breg Stock Brace |
|                    |                                                  |
|                    | Test configurations:                             |
|                    |                                                  |
|                    | -   Loose Thigh (THI)                            |
|                    | -   Loose Lower Leg (SHK)                        |
+--------------------+--------------------------------------------------+

## Purpose & Background

-   Brace migration may affect biomechanics and injury risk

-   5mm is suggested as the maximum allowable distal brace migration before inhibiting joint mechanics (Brownstein (1998), Walker et al., (1988))

-   A previous knee brace pilot test found that the Breg Stock brace migrated between -2.55mm to 6.58mm, which is considered to be past the threshold of in proposed injury risk.

-   The purpose of this test was to assess if a BOA fit system on a Ligament Brace will limit brace migration

## Hypothesis

H1:

H2:

H3:

## Methods

+------------------+-----------------------+-------------------+--------------------------------+
| Subjects         | Movements             | Equipment         | Measurements                   |
+==================+=======================+===================+================================+
| 10 Male Athletes | Counter Movement Jump | 3D motion capture | Health:                        |
|                  |                       |                   |                                |
|                  | Skater Jump           | Force plates      | -   Frontal Plane ROM          |
|                  |                       |                   | -   Peak Knee Abduction Moment |
|                  |                       |                   | -   Sagittal Plane ROM         |
|                  |                       |                   | -   Peak Knee Extension Moment |
|                  |                       |                   |                                |
|                  |                       |                   | Fit:                           |
|                  |                       |                   |                                |
|                  |                       |                   | -   Brace Migration            |
+------------------+-----------------------+-------------------+--------------------------------+

## Configurations

| Baseline: Preferred Tightness (SD) | Thigh Zone (THI)            | Lower Leg (SHK)             |
|------------------------------------|-----------------------------|-----------------------------|
| ![](images/config1_LAT.png)        | ![](images/config2_LAT.png) | ![](images/config3_LAT.png) |

## Summary

Next Steps

```{r}
#| echo: false
#| warning: false
#| include: false
library(ggplot2)
library(sjPlot)
library(tidyverse)
library(brms)
library(tidybayes)
library(RColorBrewer)
library(patchwork)
library(lme4)
library(rlang)
library(reshape2)
library(readxl)
library(effects)
library(effsize)
library(tidyr)
library(fmsb)
library(gt)
library(ggpubr) 
library("ggpubr")
rm(list=ls())
```

```{r}
#| echo: false
#| warning: false
#| include: false 



#Load in Compiled Qualitative Sheet
qualDat <- read_xlsx('Z:/Testing Segments/EndurancePerformance/EH_KneeBrace_ThighCalfImportance_Oct23/CompiledQualData_KneeBrace_Oct23.xlsx')

# Load in the Brace Static Data
braceDat <- read_csv('Z:/Testing Segments/EndurancePerformance/EH_KneeBrace_ThighCalfImportance_Oct23/Overground/Static/CompiledKneeBraceData.csv')

# Load in the IMU data
agilityDat <- read_csv('Z:/Testing Segments/EndurancePerformance/EH_KneeBrace_ThighCalfImportance_Oct23/Overground/CompiledAgilityData.csv')


pressDat <- read_csv('Z:/Testing Segments/EndurancePerformance/EH_KneeBrace_ThighCalfImportance_Oct23/Xsensor/CompiledResults_Static.csv')

baseline <- 'PREF' # baseline configuration

otherConfigs <- c('THI','SHK') # other configurations tested against base
allConfigs <- c(baseline, otherConfigs)


qualDat$Config <- factor(qualDat$Config, allConfigs)


braceDat <- as_tibble(braceDat) # creating the data frame
braceDat$Config <- factor(braceDat$Config, allConfigs) 



agilityDat <- as_tibble(agilityDat) # creating the data frame
agilityDat$Config <- factor(agilityDat$Config, allConfigs)



withinSubPlot <- function(inputDF, colName, dir) {
  
  # direction can be 'lower' or higher'. It is the direction of change that is better. 
  # For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher. 
  meanDat <- inputDF %>%
    group_by(Subject, Config) %>%
    summarize(mean = mean(!! sym(colName)))
  
  if (dir == 'lower'){
    whichConfig <- meanDat %>%
      group_by(Subject) %>%
      summarize(
        BestConfig = Config[which.min(mean)]
      )
    
  } else if (dir == 'higher') {
    whichConfig <- meanDat %>%
      group_by(Subject) %>% 
      summarize(
        BestConfig = Config[which.max(mean)]
      )
    
  }
  
  whichConfig <- merge(meanDat, whichConfig)
  
  ggplot(data = whichConfig, mapping = aes(x = as.factor(Config), y = mean, col = BestConfig, group = Subject)) + geom_point(size = 4) + 
    geom_line() + xlab('Configuration') + scale_color_manual(values=c("#000000","#00966C", "#ECE81A","#DC582A","#CAF0E4")) + theme(text = element_text(size = 12)) + ylab(paste0({{colName}})) 
  
}


extractVals <- function(dat, mod, configNames, baseConfig, var, dir) {
  
  Config = rep(NA, length(configNames))
  ProbImp = matrix(0, length(configNames))
  lowCI = matrix(0, length(configNames))
  highCI = matrix(0, length(configNames))
  
  for (i in 1:length(configNames)) {
    # This function takes the original dataframe (dat, same one entered into runmod), the Bayesian model from brms (runmod), 
    # the configuration Name, and the variable you are testing. It returns:
    # [1] the probabality the variable was better in the test config vs. the baseline config
    # [3] the lower bound of the bayesian 95% posterior interval (as percent change from baseline) 
    # [4] the upper bound of the bayesian 95% posterior interval (as percent change from baseline)
    #i = 1
    
    configName = configNames[i]
    configColName <- paste('b_Config', configName, sep = "")
    posterior <- posterior_samples(mod)
    
    if (dir == 'lower'){
      prob <- sum(posterior[,configColName] < 0) / length(posterior[,configColName])
      
    } else if (dir == 'higher') {
      
      prob <- sum(posterior[,configColName] > 0) / length(posterior[,configColName])
    }
    
    ci <- posterior_interval(mod, prob = 0.80)
    ciLow <- ci[configColName,1] 
    ciHigh <- ci[configColName,2]
    
    SDdat <- dat %>%
      group_by(Subject) %>%
      summarize(sd = sd(!! sym(var), na.rm = TRUE), mean = mean(!! sym(var), na.rm = TRUE))
    
    meanSD = mean(SDdat$sd , na.rm = TRUE)
    mean = mean(SDdat$mean, na.rm = TRUE)
    ci_LowPct <- meanSD*ciLow/mean*100
    ci_HighPct <- meanSD*ciHigh/mean*100
    
    output = list('Config:', configName, 'Probability of Improvement:', prob, 'Worse end of CI:', ci_LowPct, 'Best end of CI:', ci_HighPct)
    Config[i] = configName
    ProbImp[i] = prob
    lowCI[i] = ci_LowPct
    highCI[i] = ci_HighPct
  }
  ProbImp = round(ProbImp*100)
  lowCI = round(lowCI, 1)
  highCI = round(highCI,1)
  output = cbind(Config, ProbImp, lowCI, highCI)
  
  colnames(output) = c('Config', 'Probability of Improvement', 'Low end of CI', 'High end of CI')
  
  sentences = rep(NA, nrow(output))
  
  for (i in 1:nrow(output)){
    if (as.numeric(output[i,2]) >= 90){
      sentences[i] <- paste0('We have meaningful confidence that ',output[i,1], ' outperformed ', baseConfig, ' (',output[i,2], '%)', '\n', '\t', '- Estimated difference: ',output[i,3],' to ',output[i,4],'%' )
    } else if (as.numeric(output[i,2]) >= 80) {      
      sentences[i] <- paste('We have moderate confidence that',output[i,1], 'outperformed', baseConfig, '(',output[i,2], '%)','\n', '\t', '- Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 70){
      sentences[i] <- paste('We have minimal confidence that',output[i,1], 'outperformed', baseConfig, '(',output[i,2], '%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 30){
      sentences[i] <- paste('There were inconsistent differences between',output[i,1],'and',baseConfig,'(',output[i,2],'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 20){
      sentences[i] <- paste('We have minimal confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 10){
      sentences[i] <- paste('We have moderate confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else {
      sentences[i] <- paste('We have meaningful confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    }
  }
  
  writeLines(sentences)
  return()
}

# Setting up  "Best Of" line plots 
withinSubQualPlot <- function(inputDF) {
  
  # direction can be 'lower' or higher'. It is the direction of change that is better. 
  # For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher. 
  
  whichConfig <- inputDF %>%
    group_by(Subject) %>%
    summarize(
      BestConfig = Config[which.max(OverallConfidence)]
    )
  
  whichConfig <- merge(inputDF, whichConfig)
  
  ggplot(data = whichConfig, mapping = aes(x = as.factor(Config), y = OverallConfidence, col = BestConfig, group = Subject)) + geom_point(size = 4) + 
    geom_line() + xlab('Configuration') + scale_color_manual(values=c("#000000", "#00966C", "#ECE81A","#DC582A","#CAF0E4")) + ylab('Rating') + theme(text = element_text(size = 12))
  
}  


replaceName <- function(DF, toReplace, newName){ 
  
  # replace incorrect Trial names with new name
  DF <- DF %>% 
    mutate(Trial = replace(Trial, Trial == toReplace, newName))
  return(DF)
} 

###############################
```

## **Qualitative**

```{r}
#| echo: false
#| layout-ncol: 2
#| tbl-column: page-right
#| fig-column: page-left
#| warning: false
#| fig-height: 7
#| fig-width: 4  

qualDat %>%
  pivot_longer(cols = ThighSnugness :CalfSnugness  , 
               names_to = "Location", values_to = "Rating") %>%
  group_by(Location, Config) %>%
  summarize(
    avg = mean(Rating, na.rm = TRUE)
    
  ) 
 
qualDat %>%
  pivot_longer(cols = OverallConfidence , 
               names_to = "Location", values_to = "Rating") %>%
  group_by(Location, Config) %>%
  summarize(
    avg = mean(Rating, na.rm = TRUE)
    
  )%>%
  gt() 

qualDat <- pivot_longer(qualDat, cols = ThighSnugness :CalfSnugness, names_to = 'Location', values_to = 'Rating')

FF <- qualDat %>%
  filter(Location=="ThighSnugness")


qualDat$Location <- factor(qualDat$Location, c('ThighSnugness', 'CalfSnugness'))


a <- withinSubQualPlot(qualDat)

b <- ggplot(qualDat, mapping = aes(x = Rating, fill = Config)) + 
  geom_histogram(position = 'dodge', binwidth = 1) + 
  facet_wrap(~Location) + 
  scale_fill_manual(values=c("#999999", "#00966C", "#ECE81A","#DC582A","#CAF0E4"))+
  ylab('Responses') + 
  theme(text=element_text(size=12))  





figs <- ggarrange(a, b, ncol = 1, nrow = 3)


figs
```

## **Dial Torque**

```{r}
#| echo: false
#| warning: false
# qualDat <- subset(qualDat, qualDat$Config !='STOCK')  

# 
# Subject <- qualDat$Subject
# Config <- qualDat$Config
# ThiTorque <- qualDat$ThiTorque
# ShankTorque <- qualDat$ShankTorque
# 
# qualDat  <- data.frame(Subject, Config,ThiTorque, ShankTorque)
# qualDat<- pivot_longer(qualDat, cols = ThiTorque:ShankTorque , names_to = 'Location', values_to = 'Torque')
#   # mutate(Location= replace(Location, Location == 'ThiTorque','Thigh Torque'))
# 
# 
# 
# qualDat %>%
#   group_by(Config)%>%
#   summarize(
#     R_Torque_Prox = mean(ThiTorque, na.rm = TRUE),
#     R_Torque_Proxsd = sd(ThiTorque, na.rm = TRUE),
#     R_Torque_Dist = mean(ShankTorque, na.rm = TRUE),
#     R_Torque_Distsd = sd(ShankTorque, na.rm = TRUE)
#    
#   )
#   gt() 
# 
# 
# 
# ggplot(qualDat, aes(x=Config, y = Torque, color = Location, group = Location)) + 
#     geom_boxplot()+ 
#     geom_jitter(shape=16, position=position_jitter(0.2))+
#   # facet_wrap(~Subject)+
#     theme(text = element_text(size = 12))+ 
#     ylab('Dial Torque [N-cm]')+ 
#     xlab('Location')+
#     ggtitle('BOA Brace Dial Torque')  
# 
# 

```

## **Brace Position**

```{r}
#| echo: false
#| warning: false
#| include: false

#Changing brace names to be factorable
braceDat <- braceDat %>% 
  mutate(Trial = replace(Trial, Trial == '1', 's_One'))%>%
  mutate(Trial = replace(Trial, Trial == '2', 's_Two'))%>%
  mutate(Trial = replace(Trial, Trial == '3', 's_Three'))%>%
  mutate(Trial = replace(Trial, Trial == '4', 's_Four'))  

# Setting the brace static trials to factors
allTrials <- c("s_One","s_Two","s_Three","s_Four")
braceDat$Trial <- factor(braceDat$Trial, allTrials) 

#Restructuring df for differencing and BigData
braceDat  <- pivot_wider(braceDat, names_from = 'Trial', values_from = 'RKneeBrace_VertPos')

###### 
# Differencing the trials
braceDat <- braceDat %>% 
  mutate(deltaOne = s_One - s_One)%>%
  mutate(deltaTwo = s_Two - s_One)%>%
  mutate(deltaThree = s_Three - s_One)%>%
  mutate(deltaFour = s_Four - s_One)

# Distance brace fell
braceDat %>%
  group_by(Config)%>%
  summarize(
    Mean = mean(deltaFour, na.rm = TRUE),
    SD = sd(deltaFour, na.rm = TRUE)

  )

# Save as csv for BigData
write.csv(braceDat, "Z:/Testing Segments/EndurancePerformance/EH_KneeBrace_ThighCalfImportance_Oct23/Overground/Static/AllStaticBraceDat.csv", row.names=FALSE)


# Reformatting df
braceDat  <- pivot_longer(braceDat, cols =c(s_One:deltaFour), names_to = 'Trial', values_to = 'KneeBraceVertPos')


#Subsetting just the deltas from the static trials
braceDat <-subset(braceDat, braceDat$Trial == 'deltaOne'|
                    braceDat$Trial =='deltaTwo'| 
                    braceDat$Trial=='deltaThree'|
                    braceDat$Trial =='deltaFour')


# Renaming for plotting
braceDat <- braceDat %>% 
  mutate(Trial = replace(Trial, Trial == 'deltaOne', 'One'))%>%
  mutate(Trial = replace(Trial, Trial == 'deltaTwo', 'Two'))%>%
  mutate(Trial = replace(Trial, Trial == 'deltaThree', 'Three'))%>%
  mutate(Trial = replace(Trial, Trial == 'deltaFour', 'Four'))  


allTrials <- c("One","Two","Three","Four")
braceDat$Trial <- factor(braceDat$Trial, allTrials) 

```

```{r}

#| echo: false
#| warning: false
#| include: false



# braceDat$scalePos <- scale(braceDat$KneeBraceVertPos)

# 
# fullMod <-lmer( KneeBraceVertPos ~ Config + TrialNo + (Config | Subject) , data = braceDat)
# plot_model(fullMod,)
# summary(fullMod) 
# 
# plot_model(fullMod, show.data = TRUE,  axis.title = c(' Brace Position','trialNo'))


zscoreDat <- braceDat %>%
  group_by(Subject) %>%
  mutate(z_score = scale(RKneeBrace_VertPos)) %>%
  group_by(Config)




zscore_runmod_brace <- brm(data = zscoreDat, # Bayes model
              family = gaussian,
              z_score ~ Config + (1 + Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
# Set up to not use the z-score when estimating the mm difference 



# 
# 
# runmod_brace <- brm(data = braceDat, # Bayes model
#               family = gaussian,
#               KneeBraceVertPos ~ Config  + (1 + Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
#               prior = c(prior(normal(5, 10), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
#                         prior(normal(0, 5), class = b), #beta for the intercept for the change in loading rate for each configuration
#                         prior(cauchy(0, 2), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
#                         prior(cauchy(0, 2), class = sigma)), #overall variability that is left unexplained 
#               iter = 2000, warmup = 500, chains = 4, cores = 4,
#               control = list(adapt_delta = .999, max_treedepth = 20),
#               seed = 190831)


```

```{r}
#| echo: false
#| layout-ncol: 2
#| tbl-column: page-right
#| fig-column: page-left
#| warning: false
#| fig-height: 7
#| fig-width: 4 

# Dot plot with means and SDs for Trial by Trial 
a <- ggplot(braceDat, aes(x =Trial , y = KneeBraceVertPos,  color= Config, group = Config)) +
  # geom_point(size=5)+
  scale_color_manual(values=c("#000000","#00966C", "#ECE81A","#DC582A","#CAF0E4"))+
  theme(text = element_text(size = 12))+
  ylab('Knee Brace Vertical Position (mm)')+
  xlab('Static Trial')+
  stat_summary(fun = 'mean',geom = 'line', size = 1)
  # stat_summary(geom = 'errorbar', color = 'black', fun.min = function(x) mean(x) - sd(x), fun.max=function(x) mean(x) + sd(x), width = 0.5)

  # geom_smooth(method=lm)

b <- ggplot(braceDat, aes(x =Trial , y = KneeBraceVertPos,  color= Config, group = Config)) +
  geom_point(size=5)+
  scale_color_manual(values=c("#000000","#00966C", "#ECE81A","#DC582A","#CAF0E4"))+
  facet_wrap(~Subject)+
  theme(text = element_text(size = 12))+
  ylab('Knee Brace Vertical Position (mm)')+
  xlab('Static Trial')+
  stat_summary(fun = 'mean',geom = 'line', size = 1) 



extractVals(zscoreDat, 
zscore_runmod_brace , otherConfigs, baseline, 'RKneeBrace_VertPos', 'higher') 

# extractVals(braceDat, 
# runmod_brace , otherConfigs, baseline, 'KneeBraceVertPos', 'higher') 



figs <- ggarrange(a, b, ncol = 1, nrow = 3)


# mod1 <- lmer(RKneeBrace_VertPos ~ Config + (1|Config), data = braceDat)
# summary(mod1)


```

## Agility

```{r}

#| echo: false
#| warning: false
#| include: false
# Research question 1: what is the impact of knee brace vertical position on _______ 
agilityDat <- replaceName(agilityDat, '1', 'One')

agilityDat <- replaceName(agilityDat, '2', 'Three') #Renaming Second trial to "Three" to match/sync with desired static brace trial


# Setting baseline trial
agilBaseline <- 'One' # baseline config

agilOtherTrial <- c('Three') # list configs being tested against baseline

agilAllTrials <- c(agilBaseline, agilOtherTrial)

agilityDat$Trial <- factor(agilityDat$Trial, agilAllTrials)



cmjDat <- subset(agilityDat, agilityDat$Movement == 'CMJ') 


#Joining Vert brace pos df with Biomech. df
jointDat <- merge(x = cmjDat, y = braceDat, by = c('Subject','Config','Trial'), all.x = TRUE) 



```

### Peak Knee Extension Moment

```{r}

#| echo: false
#| warning: false
#| include: false

extMomeCMJ <- jointDat %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(peakKneeEXTmom)) %>% 
  group_by(Config)


ggplot(data = extMomeCMJ , aes(x = peakKneeEXTmom, color = Config)) + geom_histogram() + facet_wrap(~Subject)


runmod_cmj <- brm(data = extMomeCMJ, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 

```

```{r}

#| echo: false
#| warning: false
#| layout-ncol: 2


##### CMJ jump peak knee extension moment


p <- withinSubPlot(cmjDat, colName = 'peakKneeEXTmom', dir = 'higher')
p + ylab('Peak Knee Extension Moment (Nm)')



extractVals(jointDat, 
runmod_cmj, otherConfigs, baseline, 'peakKneeEXTmom', 'higher') 


```

### Knee Sagittal Range of Motion

```{r}


#| echo: false
#| warning: false
#| include: false
 
kneeflexcmjDat <- jointDat %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(kneeFLEXrom)) %>% 
  group_by(Config)



ggplot(data = kneeflexcmjDat , aes(x = kneeFLEXrom, color = Config)) + geom_histogram() + facet_wrap(~Subject)
 


kneeflexcmjMod <- brm(data = kneeflexcmjDat, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 

```

```{r}


#| echo: false
#| warning: false
#| layout-ncol: 2 


p <- withinSubPlot(kneeflexcmjDat, colName = 'kneeFLEXrom', dir = 'higher')
p + ylab('Knee Flexion ROM (deg)')





extractVals(kneeflexcmjDat, 
kneeflexcmjMod, otherConfigs, baseline, 'kneeFLEXrom', 'higher') 



```

### Peak Knee Abduction Moment

```{r}

#| echo: false
#| warning: false
#| include: false


abMomecmjDat <- jointDat %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(PeakKneeAbMoment)) %>% 
  group_by(Config) 
 

ggplot(data = abMomecmjDat , aes(x = PeakKneeAbMoment, color = Config)) + geom_histogram() + facet_wrap(~Subject) 


abMomecmjDat<- subset(abMomecmjDat, abMomecmjDat$z_score < 2) #removing outliers
abMomecmjDat<- subset(abMomecmjDat, abMomecmjDat$z_score > -2)



abMomecmjMod <- brm(data = abMomecmjDat, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (1+ Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 


```

```{r}


#| echo: false
#| warning: false
#| layout-ncol: 2 


##### CMJ jump peak knee AB moment


p <- withinSubPlot(abMomecmjDat, colName = 'PeakKneeAbMoment', dir = 'lower')
p + ylab('Peak Knee Abducion Moment (Nm)')
# p + geom_text( 
#   aes(label = Subject),   
#   color = "black", 
#   check_overlap = TRUE)  



extractVals(abMomecmjDat, 
abMomecmjMod, otherConfigs, baseline, 'PeakKneeAbMoment', 'lower') 


```

### Frontal Plane Range of Motion

```{r}

#| echo: false
#| warning: false
#| include: false

fRomcmjDat <- jointDat %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(kneeABDrom)) %>% 
  group_by(Config) 
 

fRomcmjDat<- subset(fRomcmjDat, fRomcmjDat$z_score < 2) #removing outliers
fRomcmjDat<- subset(fRomcmjDat, fRomcmjDat$z_score > -2)



ggplot(data = fRomcmjDat , aes(x = kneeABDrom, color = Config)) + geom_histogram() + facet_wrap(~Subject) 


fRomcmjMod <- brm(data = fRomcmjDat, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (1+ Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 

```

```{r}

##### CMJ jump Frontal ROM


#| echo: false
#| warning: false
#| layout-ncol: 2 


p <- withinSubPlot(fRomcmjDat, colName = 'kneeABDrom', dir = 'lower')
p + ylab('Knee Frontal Plane ROM (deg)')




extractVals(fRomcmjDat, 
fRomcmjMod, otherConfigs, baseline, 'kneeABDrom', 'lower')  



```

## Skater

```{r}
#| echo: false
#| warning: false
#| include: false

skateDat <- subset(agilityDat, agilityDat$Movement == 'Skater') 


#Joining Vert brace pos df with Biomech. df
jointDat_Skate <- merge(x = skateDat, y = braceDat, by = c('Subject','Config','Trial'), all.x = TRUE) 
```

### Knee Extension Moment

```{r}

#| echo: false
#| warning: false
#| include: false

extmome_Skate <- jointDat_Skate %>% 
  group_by(Subject) %>%
  mutate(z_score = scale(peakKneeEXTmom)) %>% 
  group_by(Config)


extMome_skateMod <- brm(data = extmome_Skate, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 

```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 

p <- withinSubPlot(extmome_Skate, colName = 'peakKneeEXTmom', dir = 'higher')
p + ylab('Peak Knee Extension Moment (Nm)')



extractVals(extmome_Skate, 
extMome_skateMod, otherConfigs, baseline, 'peakKneeEXTmom', 'higher') 
```

### Knee Flexion Range of Motion

```{r}

#| echo: false
#| warning: false
#| include: false


sagROMskate <- jointDat_Skate %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(kneeFLEXrom)) %>% 
  group_by(Config)



sagROMskateMod <- brm(data = sagROMskate, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 

```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 

p <- withinSubPlot(sagROMskate, colName = 'kneeFLEXrom', dir = 'higher')
p + ylab('Knee Flexion ROM (deg)')

extractVals(sagROMskate, 
sagROMskateMod, otherConfigs, baseline, 'kneeFLEXrom', 'higher') 


```

### Knee Abduction Moment

```{r}
#| echo: false
#| warning: false
#| include: false



##### skater jump peak knee AB moment

abmomeSkate <- jointDat_Skate %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(PeakKneeAbMoment)) %>% 
  group_by(Config) 
 

abmomeSkate<- subset(abmomeSkate, abmomeSkate$z_score < 2) #removing outliers
abmomeSkate<- subset(abmomeSkate, abmomeSkate$z_score > -2)

ggplot(data = abmomeSkate, aes(x = PeakKneeAbMoment, color = Config)) + geom_histogram() + facet_wrap(~Subject) 




abmomeSkateMod <- brm(data = abmomeSkate, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 


```

```{r}

#| echo: false
#| warning: false
#| layout-ncol: 2 


p <- withinSubPlot(abmomeSkate, colName = 'PeakKneeAbMoment', dir = 'lower')
p + ylab('Peak Knee Abducion Moment (Nm)')



extractVals(abmomeSkate, 
abmomeSkateMod, otherConfigs, baseline, 'PeakKneeAbMoment', 'lower') 


```

### Knee Frontal Plane Range of Motion

```{r}
#| echo: false
#| warning: false
#| include: false
##### skater jump Frontal ROM

fRomSkate <- jointDat_Skate %>% 
  #filter(impulse_Z < 1000) %>%
  group_by(Subject) %>%
  mutate(z_score = scale(kneeABDrom)) %>% 
  group_by(Config) 
 

ggplot(data = abmomeSkate, aes(x = PeakKneeAbMoment, color = Config)) + geom_histogram() + facet_wrap(~Subject) 


fRomSkate<- subset(fRomSkate, fRomSkate$z_score < 2) #removing outliers
fRomSkate<- subset(fRomSkate, fRomSkate$z_score > -2)




fRomSkateMod <- brm(data = fRomSkate, # Bayes model
              family = gaussian,
              z_score ~ Trial + Config  + (Config|Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
               prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                      prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                      prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                      prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained
            iter = 2000, warmup = 1000, chains = 4, cores = 4,
            control = list(adapt_delta = .999, max_treedepth = 20),
            seed = 190831) 




```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 
p <- withinSubPlot(fRomSkate, colName = 'kneeABDrom', dir = 'lower')
p + ylab('Knee Frontal Plane ROM (deg)')


extractVals(fRomSkate, 
fRomSkateMod, otherConfigs, baseline, 'kneeABDrom', 'lower')

```

Radar Plots

```{r}
#| echo: false

###### For agility run combo
# For SDHL

# Endurance <- 84
# 
# Health <- 23
# 
# Fit <- 37
# 
# Qual <- 91
# 
# data <- t(c(Endurance, Health, Fit, Qual))
# 
# data <- as.data.frame(data)
# 
# improvThresh<- as.data.frame(t(c(70,70,70,94)))
# equalThresh<- as.data.frame(t(c(50,50,50,94)))
# 
# min =as.data.frame(t(rep(0, 4)))
# max = as.data.frame(t(rep(100,4)))
# data <- rbind(max, min, improvThresh, equalThresh, data)
# 
# colnames(data) <- c("Endurance", "Health", "Fit", "Qual")
# 
# colors <- c("#C8C9C7","#53565A", "#00966C")
# 
# create_beautiful_radarchart <- function(data, color = "#00966C",
#                                         vlabels = colnames(data), vlcex = 0.9,
#                                         caxislabels = NULL, title = NULL, ...){
#   radarchart(
#     data, axistype = 1,
#     # Customize the polygon
#     pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
#     # Customize the grid
#     cglcol = "grey", cglty = 1, cglwd = 0.8,
#     # Customize the axis
#     axislabcol = "grey",
#     # Variable labels
#     vlcex = vlcex, vlabels = vlabels,
#     caxislabels = caxislabels, title = title, ...
#   )
# }
# 
# 
# create_beautiful_radarchart(data = data, color = colors)
# 
# legend(x = "topright", inset = c(- 0.3, 0.2), legend = c("Threshold for confidence in improvement", "SD", "Heel Lock Config"),
#        bty = "n", pch = 20, col = colors, text.col = "black", cex = .7, pt.cex = 1)
# # 
# # ## This code gives a visual representation of how a shoe performed against a baseline shoe in the form of a radar plot 
# # #This happens by assigning different averaged ratings to different segments 
# # #You are only adding the shoe being tested to the ratings, the baseline shoe is always set to 50 for a clear comparison
# # #The shoe being tested is rated by the average percentile confidence in each segment 
# # ###For example, if a PFS shoe had 75% confidence in CMJ  and 50% in skater for contact time, the average rating for agility would be 62.5 -> 63 
# # 
# # 
# # 
# # #### Config DDHL
# # 
# Endurance <- 81
# 
# Health <- 27
# 
# Fit <- 75
# 
# Qual <- 96
# 
# data <- t(c(Endurance, Health, Fit, Qual))
# 
# data <- as.data.frame(data)
# 
# improvThresh<- as.data.frame(t(c(70,70,70,94)))
# equalThresh<- as.data.frame(t(c(50,50,50,94)))
# 
# min =as.data.frame(t(rep(0, 4)))
# max = as.data.frame(t(rep(100,4)))
# data <- rbind(max, min, improvThresh, equalThresh, data)
# 
# colnames(data) <- c("Endurance", "Health", "Fit", "Qual")
# 
# colors <- c("#C8C9C7","#53565A", "#00966C")
# 
# create_beautiful_radarchart <- function(data, color = "#00966C",
#                                         vlabels = colnames(data), vlcex = 0.9,
#                                         caxislabels = NULL, title = NULL, ...){
#   radarchart(
#     data, axistype = 1,
#     # Customize the polygon
#     pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
#     # Customize the grid
#     cglcol = "grey", cglty = 1, cglwd = 0.8,
#     # Customize the axis
#     axislabcol = "grey",
#     # Variable labels
#     vlcex = vlcex, vlabels = vlabels,
#     caxislabels = caxislabels, title = title, ...
#   )
# }
# 
# 
# create_beautiful_radarchart(data = data, color = colors)
# 
# legend(x = "topright", inset = c(- 0.3, 0.2), legend = c("Threshold for confidence in improvement", "SD", "Heel Lock Config"),
#        bty = "n", pch = 20, col = colors, text.col = "black", cex = .7, pt.cex = 1)
```
