---
title: "PFL DATA REPORT"
format: 
  docx:
    reference-doc: 'C:/Users/eric.honert/Boa Technology Inc/PFL Team - General/Testing Segments/Report_Template.docx'
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  error: true 
  warning: false
---

# CONFIDENTAL CONTENT FOR BOA EMPLOYEES ONLY. PLEASE CONTACT PFL DIRECTLY WITH ANY QUESTIONS.

+--------------------+--------------------------------+
| Test Name          | 2025_Pressure_EX3-EX330_Kailas |
+====================+================================+
| **Benefit:**       | Endurance & Health             |
+--------------------+--------------------------------+
| **Date:**          | 8/2025                         |
+--------------------+--------------------------------+
| **Test Type:**     | Pressure                       |
+--------------------+--------------------------------+
| **Configurations** | Baseline: EX 3 CFS             |
|                    |                                |
|                    | Test configurations:           |
|                    |                                |
|                    | -   EX 3 CFS Optimized         |
+--------------------+--------------------------------+

# Purpose & Background

-   Purpose here

# Hypothesis

H1:

H2:

# Methods

+-----------------+-------------------+------------------+---------------------------+
| Subjects        | Movements         | Equipment        | Measurements              |
+=================+===================+==================+===========================+
| 5 Male Athletes | Treadmill Running | Pressure insoles | Fit:                      |
|                 |                   |                  |                           |
|                 |                   |                  | -   Heel contact area     |
|                 |                   |                  |                           |
|                 |                   |                  | -   Forefoot contact area |
|                 |                   |                  |                           |
|                 |                   |                  | -   Forefoot pressure     |
+-----------------+-------------------+------------------+---------------------------+

# Configurations

```{r}
#| echo: false
#| warning: false
#| include: false
library(readxl)
library(tidyverse)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(wordcloud)
library(readxl)
library(brms)
library(patchwork)
library(tidyr)
library(fmsb)
library(gt)
rm(list=ls())
```

```{r}
#| echo: false
#| include: false

#Load in Compiled Qualitative Sheet
qualDat <- read_xlsx('C:\\Users\\eric.honert\\Boa Technology Inc\\PFL Team - General\\Testing Segments\\EndurancePerformance\\2025_Pressure_EX3-EX330_Kailas\\CompiledQual_KailasPressure.xlsx')

qualDat <- qualDat %>%
  filter(Config == '3CFS' | Config == '3CFSO')

pressDat <- read.csv('C:\\Users\\eric.honert\\Boa Technology Inc\\PFL Team - General\\Testing Segments\\EndurancePerformance\\2025_Pressure_EX3-EX330_Kailas\\XSENSOR\\0_CompiledResults.csv')

pressDat <-pressDat %>% 
  filter(Config == '3CFS' | Config == '3CFSO')

staticDat <- read.csv('C:\\Users\\eric.honert\\Boa Technology Inc\\PFL Team - General\\Testing Segments\\EndurancePerformance\\2025_Pressure_EX3-EX330_Kailas\\XSENSOR\\Static\\0_CompiledResults_Static.csv')
staticDat <-staticDat %>% 
  filter(Config == '3CFS' | Config == '3CFSO')

treadmill <- read.csv('C:\\Users\\eric.honert\\Boa Technology Inc\\PFL Team - General\\Testing Segments\\EndurancePerformance\\2025_Pressure_EX3-EX330_Kailas\\Treadmill\\TreadmillOutcomes.csv')

treadmill <- treadmill %>%
  filter(Config == '3CFS' | Config == '3CFSO')


baseline <- '3CFS' # baseline configuration
otherConfigs <- '3CFSO' # other configurations tested against base
allConfigs <- c(baseline, otherConfigs)

qualDat$Config <- factor(qualDat$Config, allConfigs)

pressDat <- as_tibble(pressDat) # creating the data frame
pressDat$Config <- factor(pressDat$Config, allConfigs)

staticDat <- as_tibble(staticDat) # creating the data frame
staticDat$Config <- factor(staticDat$Config, allConfigs)

treadmill <- as_tibble(treadmill) # creating the data frame
treadmill$Config <- factor(treadmill$Config, allConfigs)

withinSubPlotAvg <- function(inputDF, colName, dir = 'lower', yLabel = NULL) {
  # Validate the `dir` input
  if(!dir %in% c('lower', 'higher')){
    stop("The 'dir' argument must be either 'lower' or 'higher'.")
  }
  # Calculate the mean for each Subject and Config, removing NA values
  meanDat <- inputDF %>%
    group_by(Subject, Config) %>%
    summarize(mean = mean(!! sym(colName), na.rm = TRUE), .groups = 'drop')
  # Determine the best configuration based on the direction
  if (dir == 'lower'){
    whichConfig <- meanDat %>%
      group_by(Subject) %>%
      reframe(BestConfig = Config[which.min(mean)])
  } else if (dir == 'higher') {
    whichConfig <- meanDat %>%
      group_by(Subject) %>%
      reframe(BestConfig = Config[which.max(mean)])
  }
  # Rename BestConfig to Config for merging
  whichConfig <- whichConfig %>%
    rename(Config = BestConfig)
  # Merge the best configuration back to the mean data
  mergedData <- merge(meanDat, whichConfig, by = c("Subject", "Config"))
  # Calculate overall mean for each Config, removing NA values
  overallMean <- meanDat %>%
    group_by(Config) %>%
    summarize(overallMean = mean(mean, na.rm = TRUE), .groups = 'drop')
  # Plotting with ggplot2
  plot <- ggplot() +
    geom_point(data = meanDat, mapping = aes(x = as.factor(Config), y = mean, group = Subject, color = 'Subject Means'), size = 3, alpha = 0.5) +
    geom_line(data = meanDat, mapping = aes(x = as.factor(Config), y = mean, group = Subject, color = 'Subject Means'), alpha = 0.5) +
    geom_point(data = overallMean, mapping = aes(x = as.factor(Config), y = overallMean, color = 'Overall Mean'), size = 4, shape = 17) +
    geom_line(data = overallMean, mapping = aes(x = as.factor(Config), y = overallMean, group = 1, color = 'Overall Mean'), linewidth = 1.5) +
    scale_color_manual(values = c('Subject Means' = 'grey', 'Overall Mean' = '#003C4C')) +
    xlab('Configuration') +
    theme(text = element_text(size = 16), legend.title = element_blank())
  # Set y-axis label
  if (!is.null(yLabel)) {
    plot <- plot + ylab(yLabel)
  } else {
    plot <- plot + ylab(paste0(colName))
  }
  print(plot)
}

extractVals <- function(dat, mod, configNames, baseConfig, var, dir) {
  
  Config = rep(NA, length(configNames))
  ProbImp = matrix(0, length(configNames))
  lowCI = matrix(0, length(configNames))
  highCI = matrix(0, length(configNames))
  
  for (i in 1:length(configNames)) {
    # This function takes the original dataframe (dat, same one entered into runmod), the Bayesian model from brms (runmod), 
    # the configuration Name, and the variable you are testing. It returns:
    # [1] the probabality the variable was better in the test config vs. the baseline config
    # [3] the lower bound of the bayesian 95% posterior interval (as percent change from baseline) 
    # [4] the upper bound of the bayesian 95% posterior interval (as percent change from baseline)
    #i = 1
    
    configName = configNames[i]
    configColName <- paste('b_Config', configName, sep = "")
    posterior <- posterior_samples(mod)
    
    if (dir == 'lower'){
      prob <- sum(posterior[,configColName] < 0) / length(posterior[,configColName])
      
    } else if (dir == 'higher') {
      
      prob <- sum(posterior[,configColName] > 0) / length(posterior[,configColName])
    }
    
    ci <- posterior_interval(mod, prob = 0.80)
    ciLow <- ci[configColName,1] 
    ciHigh <- ci[configColName,2]
    
    SDdat <- dat %>%
      group_by(Subject) %>%
      summarize(sd = sd(!! sym(var), na.rm = TRUE), mean = mean(!! sym(var), na.rm = TRUE))
    
    meanSD = mean(SDdat$sd , na.rm = TRUE)
    mean = mean(SDdat$mean, na.rm = TRUE)
    ci_LowPct <- meanSD*ciLow/mean*100
    ci_HighPct <- meanSD*ciHigh/mean*100
    
    output = list('Config:', configName, 'Probability of Improvement:', prob, 'Worse end of CI:', ci_LowPct, 'Best end of CI:', ci_HighPct)
    Config[i] = configName
    ProbImp[i] = prob
    lowCI[i] = ci_LowPct
    highCI[i] = ci_HighPct
  }
  ProbImp = round(ProbImp*100)
  lowCI = round(lowCI, 1)
  highCI = round(highCI,1)
  output = cbind(Config, ProbImp, lowCI, highCI)
  
  colnames(output) = c('Config', 'Probability of Improvement', 'Low end of CI', 'High end of CI')
  
  sentences = rep(NA, nrow(output))
  
  for (i in 1:nrow(output)){
    if (as.numeric(output[i,2]) >= 90){
      sentences[i] <- paste0('We have meaningful confidence that ',output[i,1], ' outperformed ', baseConfig, ' (',output[i,2], '%)', '\n', '\t', '- Estimated difference: ',output[i,3],' to ',output[i,4],'%' )
    } else if (as.numeric(output[i,2]) >= 80) {      
      sentences[i] <- paste('We have moderate confidence that',output[i,1], 'outperformed', baseConfig, '(',output[i,2], '%)','\n', '\t', '- Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 70){
      sentences[i] <- paste('We have minimal confidence that',output[i,1], 'outperformed', baseConfig, '(',output[i,2], '%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 30){
      sentences[i] <- paste('There were inconsistent differences between',output[i,1],'and',baseConfig,'(',output[i,2],'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 20){
      sentences[i] <- paste('We have minimal confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else if (as.numeric(output[i,2]) >= 10){
      sentences[i] <- paste('We have moderate confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    } else {
      sentences[i] <- paste('We have meaningful confidence that',output[i,1],'performed worse than',baseConfig,'(',(100 - as.numeric(output[i,2])),'%)','\n', '\t', 'Estimated difference:',output[i,3],'to',output[i,4],'%')
    }
  }
  
  writeLines(sentences)
  return()
}

# qual average plot
withinSubQualAvg <- function(inputDF) {
  
  # direction can be 'lower' or higher'. It is the direction of change that is better. 
  # For example, for contact time lower is better. so we put 'lower'. for jump height, higher is better, so we put higher. 
  # Calculate the mean for each Subject and Config, removing NA values
  meanDat <- inputDF %>%
    group_by(Subject, Config) %>%
    summarize(mean = mean(OverallFit, na.rm = TRUE), .groups = 'drop')
  
  
  whichConfig <- inputDF %>%
    group_by(Subject) %>%
    summarize(
      BestConfig = Config[which.max(OverallFit)]
    )
  
  whichConfig <- whichConfig %>%
    rename(Config = BestConfig)
  
  mergeDat <- merge(meanDat, whichConfig)
  
  overallMean <- meanDat %>%
    group_by(Config) %>%
    summarize(overallMean = mean(mean, na.rm = TRUE), .groups = 'drop')
  # Plotting with ggplot2
  plot <- ggplot() +
    geom_point(data = meanDat, mapping = aes(x = as.factor(Config), y = mean, group = Subject, color = 'Subject Means'), size = 3, alpha = 0.5) +
    geom_line(data = meanDat, mapping = aes(x = as.factor(Config), y = mean, group = Subject, color = 'Subject Means'), alpha = 0.5) +
    geom_point(data = overallMean, mapping = aes(x = as.factor(Config), y = overallMean, color = 'Overall Mean'), size = 4, shape = 17) +
    geom_line(data = overallMean, mapping = aes(x = as.factor(Config), y = overallMean, group = 1, color = 'Overall Mean'), linewidth = 1.5) +
    scale_color_manual(values = c('Subject Means' = 'grey', 'Overall Mean' = '#003C4C')) +
    xlab('Configuration') + ylab('Rating') +
    theme(text = element_text(size = 16), legend.title = element_blank()) 
    
  
  print(plot)
  
}

###############################
```

# **Qualitative**

```{r}
#| echo: false
#| layout-ncol: 2
#| tbl-column: page-right
#| fig-column: page-left
#| warning: false
#| fig-height: 7
#| fig-width: 4

qualDatplot <- pivot_longer(qualDat, cols = Forefoot:Heel, names_to = 'Location', values_to = 'Rating')

qualDatplot$Location <- factor(qualDatplot$Location, c('Forefoot', 'Midfoot', 'Heel')) 


a <- withinSubQualAvg(qualDat)

b <- ggplot(qualDatplot, mapping = aes(x = Rating, fill = Config)) + 
  geom_histogram(position = 'dodge', binwidth = 1) + facet_wrap(~Location) + scale_fill_manual(values=c("#999999", "#00966C", "#ECE81A","#DC582A","#CAF0E4")) +
  ylab('Responses') + theme(text=element_text(size=12)) + geom_vline(xintercept = 5, linewidth = 1) 


figs <- ggarrange(a, b, ncol = 1, nrow = 2)
figs

qualDat %>%
  pivot_longer(cols = OverallFit:Heel, 
               names_to = "Location", values_to = "Rating") %>%
  group_by(Location, Config) %>%
  summarize(
    Avg = median(Rating, na.rm = TRUE)
  ) %>%
  gt() 

```

# **Energy Efficiency**

## Positive Center of Mass Work - Running: Lower is Better

```{r}
#| echo: false
#| warning: false
#| include: false 

COMp <- treadmill %>%
  group_by(Subject)%>%
  mutate(z_score = scale(COMWork_pos)) %>% 
  group_by(Config)

COMp<- subset(COMp, COMp$z_score < 2) #removing outliers  
COMp<- subset(COMp, COMp$z_score > -2)


ggplot(data = COMp, aes(x = COMWork_pos, fill = Config)) + geom_histogram() + facet_wrap(~Subject)


COMwMod <- brm(data = COMp, # Bayes model
              family = gaussian,
              z_score ~ Config + Order + (1 + Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2  

withinSubPlotAvg(COMp, 'COMWork_pos', 'lower', 'Positive Center of Mass Work (J)')
extractVals(COMp, COMwMod, otherConfigs, baseline, 'COMWork_pos', 'lower') 
```

## Negative Center of Mass Work - Running: Lower (closer to 0) is Better

```{r}
#| echo: false
#| warning: false
#| include: false 

COMn <- treadmill %>%
  group_by(Subject)%>%
  mutate(z_score = scale(COMWork_neg)) %>% 
  group_by(Config)

COMn<- subset(COMn, COMn$z_score < 2) #removing outliers  
COMn<- subset(COMn, COMn$z_score > -2)

ggplot(data = COMn, aes(x = COMWork_neg, fill = Config)) + geom_histogram() + facet_wrap(~Subject)


NCOMwMod <- brm(data = COMn, # Bayes model
              family = gaussian,
              z_score ~ Config + Order + (1 + Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2

withinSubPlotAvg(COMn, 'COMWork_neg', 'higher', 'Negative Center of Mass Work (J)')
extractVals(COMn, NCOMwMod, otherConfigs, baseline, 'COMWork_neg', 'higher') 
```

# Dynamic Fit: Running

## Heel Contact Area: Higher is Better

```{r}
#| echo: false
#| warning: false
#| include: false 

###### Heel Contact

HeelCondat <- pressDat %>% 
  group_by(Subject) %>%
  mutate(z_score = scale(heelAreaP)) %>% 
  group_by(Config)

HeelCondat<- subset(HeelCondat, HeelCondat$z_score < 2) #removing outliers  
HeelCondat<- subset(HeelCondat, HeelCondat$z_score > -2)

ggplot(data = HeelCondat, aes(x = heelAreaP, fill = Config)) + geom_histogram() + facet_wrap(~Subject)

HeelMod <- brm(data = HeelCondat, # Bayes model
              family = gaussian,
              z_score ~ Config + (Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2

withinSubPlotAvg(HeelCondat, 'heelAreaP', 'higher', 'Heel Contact Area (%)')
extractVals(HeelCondat, HeelMod, otherConfigs, baseline, 'heelAreaP', 'higher')
```

## Peak Toe Pressure (Toe Clawing): Lower is Better

```{r}
#| echo: false
#| warning: false
#| include: false 

#Peak toe press
Toedat <- pressDat %>% 
  group_by(Subject) %>%
  mutate(z_score = scale(maxmaxToes)) %>% 
  group_by(Config)

Toedat<- subset(Toedat, Toedat$z_score < 2) #removing outliers  
Toedat<- subset(Toedat, Toedat$z_score > -2)

ggplot(data = Toedat, aes(x = maxmaxToes, fill = Config)) + geom_histogram() + facet_wrap(~Subject)

# Note for trail run metrics: Warmup was reduced (from 1000 to 500)
ToeMod <- brm(data = Toedat, # Bayes model
              family = gaussian,
              z_score ~ Config + (Config| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 500, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2  

withinSubPlotAvg(Toedat, 'maxmaxToes', 'lower', 'Peak Toe Pressure (kPa)')
extractVals(Toedat, ToeMod, otherConfigs, baseline, 'maxmaxToes', 'lower')
```

# Static Fit

## **Dorsal Pressure Variation: Lower is Better**

```{r}
#| echo: false
#| warning: false
#| include: false 
################

###############################################
# SD Dorsal Pressure

covDorPress <- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(covDorsalPressure)) %>% 
  group_by(Config)

ggplot(data = covDorPress, aes(x = covDorsalPressure, fill = Config)) + geom_histogram() + facet_wrap(~Subject)

# Note: these models are updated for non-zscored data
covDorPressMod <- brm(data = covDorPress, # Bayes model
              family = gaussian,
              z_score ~ Config +( 1 | Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(1, 2), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 
withinSubPlotAvg(covDorPress , colName = 'covDorsalPressure', dir = 'lower', yLabel = 'Dorsal Pressure Variation')  
extractVals(covDorPress, covDorPressMod, otherConfigs, baseline, 'covDorsalPressure', 'lower') 
```

## Peak Dorsal Pressure: Lower is Better

```{r}
#| echo: false
#| warning: false
#| include: false 
################

###############################################
# Peak Dorsal Pressure
peakDorPress <- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(maxDorsalPressure)) %>% 
  group_by(Config)

ggplot(data = peakDorPress, aes(x = maxDorsalPressure, fill = Config)) + geom_histogram() + facet_wrap(~Subject)

# Note: these models are updated for non-zscored data
peakDorPressMod <- brm(data = peakDorPress, # Bayes model
              family = gaussian,
              z_score ~ Config + (1 | Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(1, 2), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 
withinSubPlotAvg(peakDorPress , colName = 'maxDorsalPressure', dir = 'lower', yLabel = 'Peak Dorsal Pressure (kPa)')  
extractVals(peakDorPress, peakDorPressMod, otherConfigs, baseline, 'maxDorsalPressure', 'lower') 
```

## Average Dorsal Pressure: Higher is Better

```{r}
#| echo: false
#| warning: false
#| include: false 
################

###############################################
# Averager Dorsal Pressure

avgDorPress <- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(meanDorsalPressure)) %>% 
  group_by(Config)
  
ggplot(data = avgDorPress, aes(x = meanDorsalPressure, fill = Config)) + geom_histogram() + facet_wrap(~Subject)

# Note: these models are updated for non-zscored data
avgDorPressMod <- brm(data = avgDorPress, # Bayes model
              family = gaussian,
              z_score ~ Config + (1 | Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(1, 2), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 
withinSubPlotAvg(avgDorPress , colName = 'meanDorsalPressure', dir = 'higher', yLabel = 'Avg Dorsal Pressure (kPa)')  
extractVals(avgDorPress, avgDorPressMod, otherConfigs, baseline, 'meanDorsalPressure', 'higher')
```

## Zonal Pressure

**Average Instep Pressure**

```{r}
#| echo: false
#| warning: false
#| include: false 
################

###############################################
# Dorsal Instep pressure

staticDat_instPres <- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(instepDorsalPressure)) %>% 
  group_by(Config)


# Note: these models are updated for non-zscored data
instDorsalMod <- brm(data = staticDat_instPres, # Bayes model
              family = gaussian,
              z_score ~ Config + (1 | Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(1, 2), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 
withinSubPlotAvg(staticDat_instPres , colName = 'instepDorsalPressure', dir = 'higher', yLabel = 'Avg Instep Pressure (kPa)')  
extractVals(staticDat_instPres, instDorsalMod, otherConfigs, baseline, 'instepDorsalPressure', 'higher') 
```

**Average Midfoot Pressure**

```{r}
#| echo: false
#| warning: false
#| include: false 
################

# Dorsal Midfoot avg pressure 
mfPDat<- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(mfDorsalPressure)) %>% 
  group_by(Config)


mfPMod <- brm(data = mfPDat, # Bayes model
              family = gaussian,
              z_score ~ Config + (1 + 1| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 

withinSubPlotAvg(mfPDat, colName = 'mfDorsalPressure', dir = 'higher', 'Avg Midfoot Pressure (kPa)') 
extractVals(mfPDat, mfPMod, otherConfigs, baseline, 'mfDorsalPressure', 'higher')
```

**Average Forefoot Pressure**

```{r}
#| echo: false
#| warning: false
#| include: false 
################

# Dorsal Forefoot avg pressure 
ffPDat<- staticDat %>% 
  filter(Movement == 'Standing') %>%
  mutate(z_score = scale(ffDorsalPressure)) %>% 
  group_by(Config)

ffPMod <- brm(data = ffPDat, # Bayes model
              family = gaussian,
              z_score ~ Config + (1| Subject), #fixed effect of configuration and time period with a different intercept and slope for each subject
              prior = c(prior(normal(0, 1), class = Intercept), #The intercept prior is set as a mean of 25 with an SD of 5 This may be interpreted as the average loading rate (but average is again modified by the subject-specific betas)
                        prior(normal(0, 1), class = b), #beta for the intercept for the change in loading rate for each configuration
                        prior(cauchy(0, 1), class = sd), #This is a regularizing prior, meaning we will allow the SD of the betas to vary across subjects
                        prior(cauchy(0, 1), class = sigma)), #overall variability that is left unexplained 
              iter = 2000, warmup = 1000, chains = 4, cores = 4,
              control = list(adapt_delta = .975, max_treedepth = 20),
              seed = 190831)
```

```{r}
#| echo: false
#| warning: false
#| layout-ncol: 2 

withinSubPlotAvg(ffPDat, colName = 'ffDorsalPressure', dir = 'higher', yLabel = 'Avg Forefoot Pressure (kPa)')
extractVals(ffPDat, ffPMod, otherConfigs, baseline, 'ffDorsalPressure', 'higher') 
```
