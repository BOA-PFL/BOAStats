x <- 1:2
x <- x*10
x <- log(x)
x <- sum(x)
x <- exp(x)
x
x <- 1:2
x
x<- x*10
x<- x*10
x<- x*10
x <- 1:2
x <- x*10
x <- log(x)
x <- sum(x)
x <- exp(x)
x
x <- sum(x)
> x <- log(x)
x <- log(x)
x<- exp(x)
# plot residuals against speed
plot( resid(m) ~ speed , data=cars )
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile"
install.packages("pkgbuild")
install.packages("jsonlite",type="source")
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking",ref="Experimental")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
# see ?cars for details
data(cars)
# fit a linear regression of distance on speed
m <- lm( dist ~ speed , data=cars )
# estimated coefficients from the model
coef(m)
# plot residuals against speed
plot( resid(m) ~ speed , data=cars )
library(tidyverse)
#> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
#> ✔ ggplot2 3.3.2     ✔ purrr   0.3.4
#> ✔ tibble  3.0.3     ✔ dplyr   1.0.2
#> ✔ tidyr   1.1.2     ✔ stringr 1.4.0
#> ✔ readr   1.4.0     ✔ forcats 0.5.0
#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
install.packages("tidyverse")
library(tidyverse)
#> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
#> ✔ ggplot2 3.3.2     ✔ purrr   0.3.4
#> ✔ tibble  3.0.3     ✔ dplyr   1.0.2
#> ✔ tidyr   1.1.2     ✔ stringr 1.4.0
#> ✔ readr   1.4.0     ✔ forcats 0.5.0
#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data=mpg)
ggplot(data=mpg)+geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data=mpg)+geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data=mpg)+geom_point(mapping = aes(x = drv, y = class))
ggplot(data=mpg)+geom_point(mapping = aes(x = displ, y = hwy, color = class))
?mpg
ggplot(data=mpg)+geom_point(mapping = aes(x = hwy, y = cyl, stroke))
ggplot(data=mpg)+geom_point(mapping = aes(x = hwy, y = cyl, stroke = class))
ggplot(data=mpg)+geom_point(mapping = aes(x = hwy, y = cyl, stoke = stroke))
ggplot(data=mpg)+geom_point(mapping = aes(x = hwy, y = cyl, stroke = stroke))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))+ facet_wrap(~class, nrow =2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))+ facet_grid(drv~class)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))+ facet_grid(.~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
# left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# right
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = TRUE
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = TRUE)
?se
?se
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(),se=FALSE
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(se=FALSE)
ggplot(data=diamonds)+geom_bar(mapping = aes(x=colorConverter))
ggplot(data=diamonds)+geom_bar(mapping = aes(x=color))
ggplot(data=diamonds)+geom_bar(mapping = aes(x=cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = stat(prop), group = 1))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = stat(prop), group = 1))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = count))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop),group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop),group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop), group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
install.packages("maps")
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
?labs
View(nz)
?geom_abline()
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name <- 3.5
r_rocks <- 2^3
my_variable <- 10
my_variable
my_variable <- 10
my_variable <- 10
my_varıable
#> Error in eval(expr, envir, enclos): object 'my_varıable' not found
library(tidyverse)
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fiiter(mpg, cyl = 8)
filter(diamond, carat > 3)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fiiter(mpg, cyl = 8)
filter(diamond, carat > 3)
library(nycflights13)
install.packages(nycflights13)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(nycflights13)
instal.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
flights
view(flights)
filter(flights, dbl>120)
filter(flights, deb_delay>120)
filter(flights, dep_delay>120)
flights
view(flights)
filter(flights, arr_delay>120 & ((dest==IAH)|(dest==HOU)) & ((carrier==UA)|(carrier==AA)|(carrier==DL))& dep_delay==0 & dep_time<600 & dep_time >0)
last_error()
`rlang::last_error()`
rlang::last_error()
arrange(flights, desc(dep_time))
arrange(flights, asc(dep_delay))
arrange(flights, dep_delay)
?select
?log2()
?row_number
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 4
#> # Groups:   year, month [12]
#>    year month   day  mean
#>   <int> <int> <int> <dbl>
#> 1  2013     1     1 11.5
#> 2  2013     1     2 13.9
#> 3  2013     1     3 11.0
#> 4  2013     1     4  8.95
#> 5  2013     1     5  5.73
#> 6  2013     1     6  7.15
#> # … with 359 more rows
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
#> `summarise()` regrouping output by 'year', 'month' (override with `.groups` argument)
#> # A tibble: 365 x 4
#> # Groups:   year, month [12]
#>    year month   day  mean
#>   <int> <int> <int> <dbl>
#> 1  2013     1     1 11.4
#> 2  2013     1     2 13.7
#> 3  2013     1     3 10.9
#> 4  2013     1     4  8.97
#> 5  2013     1     5  5.73
#> 6  2013     1     6  7.15
#> # … with 359 more rows
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
#> `summarise()` ungrouping output (override with `.groups` argument)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
#> `summarise()` ungrouping output (override with `.groups` argument)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
install.packages(Lahman)
install.packages("Lahman")
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
#> `summarise()` ungrouping output (override with `.groups` argument)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
#> `geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = "cs")'
install.packages("readr")
install.packages("readr")
install.packages("readr")
install.packages("readr")
medialdata <- read_csv("C:\Users\Adam.Luftglass\OneDrive - Boa Technology Inc\Documents\AgilityPerformanceData\BOA_Medial_Wrapping_Apr_2021")
medialdata <- read_csv("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021")
library(readr)
medialdata <- read_csv("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021")
medialdata <- read_csv("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\Alex_Court_Laces_CMJ - Forces.csv")
medialdata <- read_csv("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\Alex_Court_Laces_CMJ - Forces")
install.packages("data.table")
library(data.table)
medialdata <- fread("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\Alex_Court_Laces_CMJ - Forces")
medialdata <- fread("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\Compiled Agility Data")
medialdata <- fread("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\CompiledAgilityData")
medialdata <- fread("C:\\Users\\Adam.Luftglass\\OneDrive - Boa Technology Inc\\Documents\\AgilityPerformanceData\\BOA_Medial_Wrapping_Apr_2021\\CompiledAgilityData")
install.packages("brms")
